<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>Key and signature tools</title>

<para>
<ptitle>About key and signature tools</ptitle>
　The key / signature tool is a tool for performing a simple <kw>electronic signature</kw> on distributed data.<r/>
　With a digital signature, you can check that a file was created by a legitimate creator, check for falsification, and check for corruption.<r/>
　Now, <link href="FileChkTool"/> uses this signature.<r/>
</para>


<para>
<ptitle>About public and private keys</ptitle>
　In order to use the key / signing tool, you need to use this tool to create two key pairs, a "<kw>public key</kw>" (public key) and a "<kw>private key</kw>" You will need to create a key (<kw>key pair</kw>) that will become a (pair).<r/>
　The key is actually a string in the following format.<r/>
<bq>
-----BEGIN PUBLIC KEY-----<r/>
MIGJAoGBAJYfPysW57qE3J2ddGWEG+RzXUzFkWa0ct3p7qJfuWDB+52DbfS9qSpw<r/>
iTHQ54vl7K35x+WDQdn29cfgJxp9UD3fzY4h6E2ReE9vj4h0FCMK8dpCFnQkOD/M<r/>
hDSiXfXz7KmfMXppM0CjofvH+IL7BJ3/GcLFcuEw3hEnzoajIm1TAgMBAAE=<r/>
-----END PUBLIC KEY-----<r/>
</bq>
　A public key is a key that can be made public, and a private key is a key that must not be made public.<r/>
　The private key is used when signing. An electronic signature is generated using the private key.<r/>
　The public key is used to verify the signature. The private key and the public key are always paired, and only signatures made with the relevant private key can be successfully verified with the public key paired with the private key.<r/>
　Even if someone who does not know the private key signs with another private key, the signature cannot be confirmed with a valid public key. Since it is impossible to guess the private key from the public key, only the person who has the private key can sign a valid signature.<r/>
<note>
Originally, when the "public key" is made public, it is necessary to make sure that the "public key" is valid. If you don't know if a public key is legitimate, the meaning of a digital signature is weaker. However, Kirikiri's key and signature tool does not take such considerations into account.
</note>
<note>
The encryption method used by Kirikiri's key and signature tool was changed from ECC (elliptic curve cryptography) to RSA in 2.25beta7.<r/>
The RSA key generated by Kirikiri's key / signing tool is 1024 bits long. Also, the private key is not protected with a passphrase.<r/>
The RSA public / private key generated by Kirikiri's key / signing tool is compatible with the PEM format key of other software, but when using a key generated by other than key / signing tool, or key / signing The operation when the key generated by the tool is used by other software is not supported.<r/>
</note>
</para>

<para>
<ptitle>How to <kw>generate keys</kw></ptitle>
<r/>
　When you start the key / signing tool (krkrsign.exe in the tools folder), the first thing that appears is the key generation screen.<r/>
<img src="sign0.png"/><r/><r/>
<r/>
<dl>
<dt>"Generate" button</dt>
<dd>
　Click to start key pair generation. At first, the window entitled "Collecting entropy" appears and asks you to move the mouse randomly, so follow the instructions (needed to generate keys that cannot be guessed by others).<r/>
　When the window closes, the generated key pair will be displayed in the "Generated public key" and "Generated private key" fields below.<r/>
</dd>

<dt>Generated public key</dt>
<dd>
　The generated public key is displayed. Press the "Copy" button on the side to copy the key to the clipboard.
</dd>

<dt>Generated private key</dt>
<dd>
　The generated private key is displayed. Press the "Copy" button on the side to copy the key to the clipboard.<r/>
　Please note that for security reasons, the contents of the clipboard will be cleared when you close this window.<r/>
</dd>
</dl>

</para>


<para>
<ptitle>How to <kw>signature</kw></ptitle>
<r/>
　Click the "Signature" tab to display the signature screen.<r/>
<img src="sign1.png"/><r/><r/>
<r/>
<dl>
<dt>Secret key</dt>
<dd>
　Please specify a secret key.
</dd>

<dt>Target file</dt>
<dd>
　You can specify the file to be signed.<r/>
　Press the "Browse" button to open the file reference dialog box. Specify the target file.<r/>
　You can also specify the target file by dropping the target file in this window (currently, multiple files cannot be signed at the same time).<r/>
</dd>

<dt>"Sign" button</dt>
<dd>
　Sign the target file.<r/>
　The signature file will have the file name of the target file with the extension .sig added, except in the case of Kirikiri body, where the signature is embedded in the body.<r/>
</dd>
</dl>
</para>

<para>
<ptitle>How to <kw>signature confirmation</kw></ptitle>
<r/>
　Click the "Signature Confirmation" tab to display the signature screen.<r/>
<img src="sign2.png"/><r/><r/>
<r/>
<dl>
<dt>Public key</dt>
<dd>
　Please specify a public key.
</dd>

<dt>Target file</dt>
<dd>
　You can specify the file to be checked for signature.<r/>
　Press the "Browse" button to open the file reference dialog box. Specify the target file.<r/>
　You can also specify the target file by dropping the target file in this window. (Currently, this tool cannot check the signature of multiple files at once.)<r/>
</dd>

<dt>"Check" button</dt>
<dd>
　Check the signature of the target file.<r/>
　The result is notified in a message box.
</dd>
</dl>
</para>


<para>
<ptitle>Usage from command line</ptitle>
　You can sign files using the key and signature tool from the command line. This is useful when used in combination with tools such as make.<r/>
　Specify in the following format.<r/>
<bq>
krkrsign -sign "Target file name" "Private key file name"
</bq>
For the private key file name, specify a file in which the private key is saved as text.<r/>
For example, to sign game.eXe<r/>
<bq>
krkrsign -sign "game.eXe" "key.priv"
</bq>
　is specified. Only one file can be signed per call.
</para>




</doc>


