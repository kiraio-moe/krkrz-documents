<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title><classname/></title>
<desc>
　<classname/> クラスは、<midi>MIDIの再生</midi><wave>PCMの再生</wave><cdda>CD-DAの再生</cdda>を管理するクラスです。<r/>
<wave>
　WaveSoundBuffer クラスでは、<link href="LoopTuner" /> で作成した .sli ファイルを読み込み、処理することができます。詳しくはループチューナの説明をご覧ください。<r/>
</wave>
</desc>

<member>
	<name><classname/></name>
	<type>constructor</type>
	<shortdesc><classname/> オブジェクトの構築</shortdesc>
	<arg>
		<argitem>
			<name>owner</name>
			<default></default>
			<desc>
				　イベントの発生先を指定します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　<classname/> クラスのオブジェクトを構築します。<r/>
		　イベントが発生すると owner で指定したオブジェクトの action メソッドを呼び出します。owner に null を指定すると action メソッドは呼ばれません。通常は <ref>Window</ref> クラスのオブジェクトを owner に指定します。<r/>
	</desc>
</member>


<member>
	<name>onStatusChanged</name>
	<type>event</type>
	<shortdesc>ステータスが変更された</shortdesc>
	<arg>
		<argitem>
			<name>status</name>
			<default></default>
			<desc>
				　新しいステータスです。<r/>
				　<ref><classname/>.status</ref> プロパティを参照してください。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　再生のステータス ( 状態 ) が変わった時に発生します。<r/>
	</desc>
</member>

<wave>
<member>
	<name>onLabel</name>
	<type>event</type>
	<shortdesc>ラベルを通過した</shortdesc>
	<arg>
		<argitem>
			<name>name</name>
			<default></default>
			<desc>
				　通過したラベル名です。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　再生位置がラベルを通過した際に発生します。<r/>
	</desc>
</member>
</wave>

<member>
	<name>onFadeCompleted</name>
	<type>event</type>
	<shortdesc>フェードが終了した</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　<ref><classname/>.fade</ref> メソッドで開始したフェードが終了したときに発生します。<r/>
	</desc>
</member>


<member>
	<name>open</name>
	<type>method</type>
	<shortdesc>メディアを開く</shortdesc>
	<arg>
		<argitem>
			<name>storage</name>
			<default></default>
			<desc>
				<midi>　再生したいストレージを指定します。<r/></midi>
				<wave>　再生したいストレージを指定します。<r/></wave>
				<cdda>　再生したいトラックを指定します。
				数値を指定するとそのトラックを再生することになります。"ドライブ文字:トラック番号" の
				形式の文字列を指定するとそのドライブの指定されたトラック番号が再生されます ( 例 : "e:5" )。</cdda>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　指定されたメディアを開きます。このメソッドは再生を開始しません。<r/>
		<wave>　指定されたストレージ名に .sli を付加したファイル名があれば、サウンドループ情報として読み込みます。<r/></wave>
	</desc>
</member>

<member>
	<name>play</name>
	<type>method</type>
	<shortdesc>メディアを再生する</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　メディアの再生を開始します。<r/>
	</desc>
</member>

<member>
	<name>stop</name>
	<type>method</type>
	<shortdesc>メディアを停止する</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　メディアを停止します。<r/>
	</desc>
</member>

<member>
	<name>fade</name>
	<type>method</type>
	<shortdesc>フェードを開始する</shortdesc>
	<arg>
		<argitem>
			<name>to</name>
			<default></default>
			<desc>
				　到達させる音量を指定します。<r/>
				　音量の指定については <ref><classname/>.volume</ref> プロパティを参照して
				ください。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>time</name>
			<default></default>
			<desc>
				　フェードにかける時間を ms 単位で指定します。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>delay</name>
			<default>0</default>
			<desc>
				　フェード開始までの待ち時間を ms 単位で指定します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　フェード ( 連続的な音量の変化 ) を開始します。<r/>
	</desc>
</member>

<member>
	<name>stopFade</name>
	<type>method</type>
	<shortdesc>フェードを停止する</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　<ref><classname/>.fade</ref> メソッドで開始したフェードを強制的に停止します。<r/>
		　音量は停止させた時点のままになります。<r/>
	</desc>
</member>

<wave>
<member>
	<name>freeDirectSound</name>
	<type>method</type>
	<shortdesc>DirectSound の解放</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　DirectSound を解放します。すべての WaveSoundBuffer クラスのオブジェクトは停止状態に
		なります。<r/>
		　DirectSound と WaveMapper ( MCI 等 ) による再生を同時に行えない環境などで DirectSound を
		解放するためにこのメソッドを使います。<r/>
		　このメソッドは WaveSoundBuffer クラス上にしか存在しません (WaveSoundBufferから作られたオブジェクト上にこのメソッドはありません)。使用する際は WaveSoundBuffer.freeDirectSound(); としてください。<r/>
	</desc>
</member>
</wave>

<midi>
<member>
	<name>midiOut</name>
	<type>method</type>
	<shortdesc>任意の MIDI データの出力</shortdesc>
	<arg>
		<argitem>
			<name>data</name>
			<default></default>
			<desc>
				　出力する MIDI データをオクテット形式で指定します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　任意の MIDI データを出力します。<r/>
		　データ中に ff 00 が入っていると、その時点で 50ms のウェイトが入ります。<r/>
	</desc>
</member>
</midi>

<wave>
<member>
	<name>getVisBuffer</name>
	<type>method</type>
	<shortdesc>視覚化用データの取得</shortdesc>
	<arg>
		<argitem>
			<name>buffer</name>
			<default></default>
			<desc>
				　出力データを書き込むバッファを指定します。<r/>
				　バッファは 16bit 符号付き整数の配列で、numsamples 引数および channels 引数
				で指定したサンプルが書き込まれるのに十分な個数 ( numsamples * channels 以上 )
				である必要があります。<r/>
				　channels に 1 以外を指定した場合は、各チャネルのサンプルはインターリーブされて
				( ステレオならば 右 左 右 左 ・・・・の順に ) 格納されます。<r/>
				　配列の先頭要素へのポインタを指定する必要がありますが、整数型にキャストして
				渡してください。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>numsamples</name>
			<default></default>
			<desc>
				　取得するサンプル数を指定します。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>channel</name>
			<default></default>
			<desc>
				　取得するチャンネル数を指定します。<r/>
				　1 を指定すると、モノラルの場合はそのまま、そうでない場合は 1チャンネルにダウンミックス
				されたデータを得ることができます。<r/>
				　1 以外の数値を指定する場合は、再生中のサウンドと同じチャンネル数を指定する必要がありま
				す。このばあいは、そのままのデータを得ることができます。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>ahead</name>
			<default>0</default>
			<desc>
				　先読みするサンプル数を指定します。<r/>
				　現在の再生位置から、この引数で指定したサンプル数だけ先にあるサンプルから取得することができます。<r/>
				　0 を指定するか、この引数を省略すると、現在の再生位置からの取得になります。<r/>
			</desc>
		</argitem>
	</arg>
	<result>取得できたサンプル数が戻ります。</result>
	<desc>
		　視覚化用に PCM データを取得します。<r/>
		　現在の再生位置から PCM データを読み込み、buffer 引数で指定した配列に書き込みます。<r/>
		　ただし、バッファの状態や再生形式によっては正常にデータを読み込めない可能性もあります。<r/>
		　このメソッドは C や C++ 等で書かれたプラグインから利用されることを想定してますので、たとえば
		buffer 引数に TJS の配列を指定する、などのようなことはできません。<r/>
		　このメソッドを使用するには  <ref><classname/>.useVisBuffer</ref> プロパティを真に指定する
		必要があります。<r/>
	</desc>
</member>
</wave>

<member>
	<name>position</name>
	<type>property</type>
	<shortdesc>再生位置</shortdesc>
	<access>r/w</access>
	<desc>
		　再生位置を ms 単位で表します。値を設定するとその位置に移動します。<r/>
		<midi>　現バージョンでは実装されていません。<r/></midi>
		<cdda>　現バージョンでは実装されていません。<r/></cdda>
	</desc>
</member>

<wave>
<member>
	<name>samplePosition</name>
	<type>property</type>
	<shortdesc>再生位置</shortdesc>
	<access>r/w</access>
	<desc>
		　再生位置をサンプル数単位で表します。値を設定するとその位置に移動します。<r/>
	</desc>
</member>
</wave>
<member>
	<name>paused</name>
	<type>property</type>
	<shortdesc>一時停止状態かどうか</shortdesc>
	<access>r/w</access>
	<desc>
		　一時停止状態かどうかを表します。値を設定することもできます。<r/>
		　真の場合は一時停止状態です。<r/>
		<midi>　現バージョンでは実装されていません。<r/></midi>
		<cdda>　現バージョンでは実装されていません。<r/></cdda>
	</desc>
</member>

<member>
	<name>totalTime</name>
	<type>property</type>
	<shortdesc>メディアの再生時間</shortdesc>
	<access>r</access>
	<desc>
		　メディアの総再生時間を ms 単位で表します。<r/>
		<midi>　現バージョンでは実装されていません。<r/></midi>
		<cdda>　現バージョンでは実装されていません。<r/></cdda>
	</desc>
</member>

<member>
	<name>looping</name>
	<type>property</type>
	<shortdesc>ループ再生を行うかどうか</shortdesc>
	<access>r/w</access>
	<desc>
		　ループ再生を行うかどうかを表します。値を設定することもできます。<r/>
		　真を指定するとループ再生がされます。<r/>
		<wave>　偽を指定しても、再生しているメディアにループ情報があれば、ループ情報が利用されます。<r/></wave>
	</desc>
</member>

<member>
	<name>volume</name>
	<type>property</type>
	<shortdesc>音量</shortdesc>
	<access>r/w</access>
	<desc>
		　再生する音量を表します。値を設定することもできます。<r/>
		0 ～ 100000 の数値で指定し、 0 が完全ミュート、100000 が 100% の音量となります。<r/>
	</desc>
</member>

<member>
	<name>volume2</name>
	<type>property</type>
	<shortdesc>第２音量</shortdesc>
	<access>r/w</access>
	<desc>
		　再生する音量を表します。値を設定することができます。<r/>
		　<ref><classname/>.volume</ref> プロパティと違うのは、このプロパティは
		<ref><classname/>.fade</ref> メソッドでも変化しないということです。<r/>
		　最終的な音量は、volume プロパティとこのプロパティの積で決定されます。volume プロパティが
		100000 ( 100% ) で volume2 プロパティも 100000 ( 100% ) ならば 100% × 100% = 100% で
		100% の音量で再生されます。volume プロパティが 50000 ( 50% ) で volume2 プロパティが 75000 ( 75% ) ならば
		50% × 75% = 37.5% で 37.5 % の音量で再生されます。<r/>
	</desc>
</member>

<member>
	<name>status</name>
	<type>property</type>
	<shortdesc>ステータス</shortdesc>
	<access>r</access>
	<desc>
		　現在の状態を表します。<r/>
		　状態は文字列で表され、以下の値をとります。<r/>
		<tt>"<kw>unload</kw>"   : </tt> メディアが開かれてない<r/>
		<tt>"<kw>play</kw>"     : </tt> メディアは再生中である<r/>
		<tt>"<kw>stop</kw>"     : </tt> メディアは停止中である<r/>
	</desc>
</member>

<wave>
<member>
	<name>useVisBuffer</name>
	<type>property</type>
	<shortdesc>視覚化用バッファを使用するかどうか</shortdesc>
	<access>r/w</access>
	<desc>
		　視覚化用バッファを使用するかどうか表します。値を設定することもできます。<r/>
		　真を指定すると視覚化用バッファが利用可能になり、<ref><classname/>.getVisBuffer</ref> メソッドが
		利用可能になります。<r/>
		　デフォルトでは偽になっています。真を指定すると偽を指定したときよりも多くのメモリと CPU 時間を
		消費するようになるので注意してください。<r/>
	</desc>
</member>
</wave>

<wave>
<member>
	<name>channels</name>
	<type>property</type>
	<shortdesc>チャンネル数</shortdesc>
	<access>r</access>
	<desc>
		　現在再生中のサウンドのチャンネル数を表します。<r/>
		　モノラルの場合は 1、ステレオの場合は 2 になります。<r/>
		　メディアが開かれていない状態では正常な値を返さない可能性があります。<r/>
	</desc>
</member>
</wave>

<wave>
<member>
	<name>frequency</name>
	<type>property</type>
	<shortdesc>サンプリング周波数</shortdesc>
	<access>r/w</access>
	<desc>
		　現在再生中のサウンドのサンプリング周波数を表します。値を設定することもできます。<r/>
		　CD と同じサンプリング周波数の場合は 44100 になります。<r/>
		　メディアが開かれていない状態では正常な値を返さない可能性があります。<r/>
		　値を設定すると、その周波数で再生します。<r/>
	</desc>
</member>
</wave>

<wave>
<member>
	<name>bits</name>
	<type>property</type>
	<shortdesc>量子化ビット数</shortdesc>
	<access>r</access>
	<desc>
		　現在再生中のサウンドの量子化ビット数を表します。<r/>
		　CD と同じ量子化ビット数の場合は 16 になります。<r/>
		　メディアが開かれていない状態では正常な値を返さない可能性があります。<r/>
	</desc>
</member>
</wave>

<wave>
<member>
	<name>flags</name>
	<type>property</type>
	<shortdesc>フラグ</shortdesc>
	<access>r</access>
	<desc>
		　フラグを表すオブジェクトを得ることができます。<r/>
		　このオブジェクトには 0 ～ 15 のプロパティがあり、それぞれ各フラグの値を表しています。プロパティには間接メンバ選択演算子 ('[ ]' 演算子) を用いてアクセスすることができます。これらのプロパティには値を設定することもできます。値は 0 ～ 9999 の範囲であり、これを下回ったり、上回ることはできません。<r/>
		　このオブジェクトの count プロパティは常に 16 を返します。<r/>
		　このオブジェクトには reset メソッドがあり、このメソッドを実行すると、全てのフラグが 0 にリセットされます。<r/>
		　メディアを開いていない場合は、このオブジェクトのプロパティに値を設定しても無視されます。<r/>
		　このオブジェクトは一見配列オブジェクトにも見えますが、いわゆるTJSの配列オブジェクト('Array' クラスのオブジェクト) ではありません。<r/>
		　フラグは <ref>WaveSoundBuffer.open</ref> メソッドで全て 0 にリセットされます。<r/>
<example>
var buf = new WaveSoundBuffer(window);<r/>
(略)<r/>
buf.flags.reset(); // 全てのフラグを 0 にリセット<r/>
var cnt = buf.flags.count; // cnt には 16 が入る<r/>
buf.flags[4] = 34; // 4番のフラグに34を代入<r/>
</example>
	</desc>
</member>
</wave>

<wave>
<member>
	<name>labels</name>
	<type>property</type>
	<shortdesc>ラベル</shortdesc>
	<access>r</access>
	<desc>
		　ラベルを表すオブジェクトを得ることができます。<r/>
		　このオブジェクトは辞書配列で、それぞれ、ループ情報中のラベルの名前をメンバ名とした要素が入っています。それぞれの要素も辞書配列で、name メンバはラベルの名前を表し、position メンバはミリ秒単位でのラベルの位置を表し、samplePosition はサンプル数単位でのラベルの位置を表しています。<r/>
		　この辞書配列は読み出し専用であると考えてください。値を代入したり、新しいメンバを作成しても反映されることはありません。<r/>
<example>
var buf = new WaveSoundBuffer(window);<r/>
(略)<r/>
debug.message(buf.labels['start'].position); // 'start' というラベル名の位置をミリ秒単位で<r/>
debug.message(buf.labels['start'].samplePosition); // 'start' というラベル名の位置をサンプル数単位で<r/>
</example>
	</desc>
</member>
</wave>

<wave>
<member>
	<name>pan</name>
	<type>property</type>
	<shortdesc>パン</shortdesc>
	<access>r/w</access>
	<desc>
		　パン (音像位置) を表します。値を設定することもできます。<r/>
		　音の聞こえる左右の位置を指定することができます。<r/>
		　-100000 ～ 0 ～ 100000 の数値で指定し、 -100000 が 完全に左、0 が中央、100000 が完全に右になります。<r/>
	</desc>
</member>
</wave>

<wave>
<member>
	<name>globalVolume</name>
	<type>property</type>
	<shortdesc>大域音量</shortdesc>
	<access>r/w</access>
	<desc>
		　大域音量 (マスターボリューム)を表します。値を設定することもできます。<r/>
		　この音量は、すべての WaveSoundBuffer に影響します。<r/>
		　0 ～ 100000 の数値で指定し、 0 が完全ミュート、100000 が 100% の音量となります。デフォルトの値は 100000 です。<r/>
		　このプロパティは WaveSoundBuffer クラス上にしか存在しません (WaveSoundBufferから作られたオブジェクト上にこのプロパティはありません)。使用する際は WaveSoundBuffer.globalVolume としてください。<r/>
	</desc>
</member>
</wave>

<wave>
<member>
	<name>globalFocusMode</name>
	<type>property</type>
	<shortdesc>フォーカスモード</shortdesc>
	<access>r/w</access>
	<desc>
		　フォーカスモードを表します。値を設定することもできます。<r/>
		　フォーカスモードは、アプリケーションが最小化したときや非アクティブになったときにミュートするモードです。<r/>
		　<tt><kw>sgfmNeverMute</kw></tt>を指定すると、アプリケーションがどのような状態でもミュートはしません。<r/>
		　<tt><kw>sgfmMuteOnMinimize</kw></tt>を指定すると、アプリケーションが最小化時にミュートします。<r/>
		　<tt><kw>sgfmMuteOnDeactivate</kw></tt>を指定すると、アプリケーションが非アクティブ化したときにミュートします。<r/>
		　このプロパティは WaveSoundBuffer クラス上にしか存在しません (WaveSoundBufferから作られたオブジェクト上にこのプロパティはありません)。使用する際は WaveSoundBuffer.globalFocusMode としてください。<r/>
		　このプロパティの設定よりも、コマンドラインオプションで指定した '-wsmute' (DirectSound ミュート) の設定が優先されます。<r/>
	</desc>
</member>
</wave>

<wave>
<member>
	<name>filters</name>
	<type>property</type>
	<shortdesc>フィルタ配列</shortdesc>
	<access>r</access>
	<desc>
		　インサーションフィルタオブジェクトを保持している配列(Arrayクラスのインスタンス)です。<r/>
		　この配列にフィルタオブジェクトを登録することにより、再生中にリアルタイムで音声に対して
		様々な効果をかけることができます。<r/>
		　フィルタ配列への変更が反映されるのは、<ref>WaveSoundBuffer.open</ref>メソッドが実行された
		時だけです。それまでは、この配列への変更を行っても反映はされません。<r/>
<example>
var buf = new WaveSoundBuffer(window);<r/>
(略)<r/>
buf.filters.clear(); // フィルタ配列をクリア<r/>
buf.filters.add(new WaveSoundBuffer.PhaseVocoder()); // PhaseVocoderフィルタを追加<r/>
buf.filters[0].time = 0.5; // 倍速再生<r/>
</example>
	</desc>
</member>
</wave>



</doc>
