<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>Window</title>
<desc>
　Window クラスは、<kw>ウィンドウ</kw>を管理するためのクラスです。<r/>
</desc>

<member>
	<name>Window</name>
	<type>constructor</type>
	<shortdesc>Window オブジェクトの構築</shortdesc>
	<arg>
		<argitem>
			<name>parent</name>
			<default></default>
			<desc>
				　親ウィンドウを指定します。<r/>
				　親ウィンドウを指定すると、その子ウィンドウとして生成されます。<r/>
				　指定しない場合は省略します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　Window クラスのオブジェクトを構築します。<r/>
		　ウィンドウは非表示の状態で作成され、位置やサイズは未定義 ( どこかにの位置に適当なサイズ ) です。<r/>
	</desc>
</member>

<member>
	<name>onMouseEnter</name>
	<type>event</type>
	<shortdesc>マウスが入ってきた</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　マウスがウィンドウのクライアント領域内に入ってきたときに発生します。<r/>
	</desc>
	<ref>Window.onMouseLeave</ref>
</member>

<member>
	<name>onMouseLeave</name>
	<type>event</type>
	<shortdesc>マウスが出ていった</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　マウスがウィンドウのクライアント領域内から出ていったときに発生します。<r/>
	</desc>
	<ref>Window.onMouseEnter</ref>
</member>

<member>
	<name>onClick</name>
	<type>event</type>
	<shortdesc>ウィンドウがクリックされた</shortdesc>
	<arg>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　ウィンドウがクリックされた位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　ウィンドウがクリックされた位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ウィンドウがクリックされた時に発生します。<r/>
	</desc>
	<ref>Window.onMouseDown</ref>
	<ref>Window.onDoubleClick</ref>
</member>

<member>
	<name>onDoubleClick</name>
	<type>event</type>
	<shortdesc>ウィンドウがダブルクリックされた</shortdesc>
	<arg>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　ウィンドウがダブルクリックされた位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　ウィンドウがダブルクリックされた位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ウィンドウがダブルクリックされた時に発生します。<r/>
	</desc>
	<ref>Window.onClick</ref>
</member>

<member>
	<name>onMouseDown</name>
	<type>event</type>
	<shortdesc>マウスのボタンが押された</shortdesc>
	<arg>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　マウスのボタンが押された位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　マウスのボタンが押された位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>button</name>
			<default></default>
			<desc>
				　押されたマウスボタンです。以下のいずれかの値になります。<r/>
				<tt><kw>mbLeft</kw>    : </tt>マウスの左ボタンが押された<r/>
				<tt><kw>mbMiddle</kw>  : </tt>マウスの中ボタンが押された<r/>
				<tt><kw>mbRight</kw>   : </tt>マウスの右ボタンが押された<r/>
				<tt><kw>mbX1</kw>      : </tt>マウスのサイドキー第1ボタンが押された<r/>
				<tt><kw>mbX2</kw>      : </tt>マウスのサイドキー第2ボタンが押された<r/>
			</desc>
		</argitem>
		<argitem>
			<name>shift</name>
			<default></default>
			<desc>
				　マウスボタンが押されたときに同時に押されていたシフト系のキーの状態です。
				以下の値のビット OR による組み合わせになります。<r/>
				<tt><kw>ssAlt</kw>     : </tt>ALT キーが押されていた<r/>
				<tt><kw>ssShift</kw>   : </tt>SHIFT キーが押されていた<r/>
				<tt><kw>ssCtrl</kw>    : </tt>CTRL キーが押されていた<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　マウスボタンが押された時に発生します。<r/>
	</desc>
	<ref>Window.onClick</ref>
</member>

<member>
	<name>onMouseUp</name>
	<type>event</type>
	<shortdesc>マウスのボタンが離された</shortdesc>
	<arg>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　マウスのボタンが離された位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　マウスのボタンが離された位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>button</name>
			<default></default>
			<desc>
				　離されたマウスボタンです。以下のいずれかの値になります。<r/>
				<tt><kw>mbLeft</kw>    : </tt>マウスの左ボタンが離された<r/>
				<tt><kw>mbMiddle</kw>  : </tt>マウスの中ボタンが離された<r/>
				<tt><kw>mbRight</kw>   : </tt>マウスの右ボタンが離された<r/>
				<tt><kw>mbX1</kw>      : </tt>マウスのサイドキー第1ボタンが離された<r/>
				<tt><kw>mbX2</kw>      : </tt>マウスのサイドキー第2ボタンが離された<r/>
			</desc>
		</argitem>
		<argitem>
			<name>shift</name>
			<default></default>
			<desc>
				　マウスボタンが離された時に同時に押されていたシフト系のキーの状態です。
				以下の値のビット OR による組み合わせになります。<r/>
				<tt><kw>ssAlt</kw>     : </tt>ALT キーが押されていた<r/>
				<tt><kw>ssShift</kw>   : </tt>SHIFT キーが押されていた<r/>
				<tt><kw>ssCtrl</kw>    : </tt>CTRL キーが押されていた<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　マウスボタンが離された時に発生します。<r/>
	</desc>
</member>

<member>
	<name>onMouseMove</name>
	<type>event</type>
	<shortdesc>マウスが移動した</shortdesc>
	<arg>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　マウスが移動した位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　マウスが移動した位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>shift</name>
			<default></default>
			<desc>
				　マウスが移動していた時に同時に押されていたシフト系のキーやマウスのボタンの状態です。
				以下の値のビット OR による組み合わせになります。<r/>
				<tt><kw>ssAlt</kw>     : </tt>ALT キーが押されていた<r/>
				<tt><kw>ssShift</kw>   : </tt>SHIFT キーが押されていた<r/>
				<tt><kw>ssCtrl</kw>    : </tt>CTRL キーが押されていた<r/>
				<tt><kw>ssLeft</kw>    : </tt>マウスの左ボタンが押されていた<r/>
				<tt><kw>ssMiddle</kw>  : </tt>マウスの中ボタンが押されていた<r/>
				<tt><kw>ssRight</kw>   : </tt>マウスの右ボタンが押されていた<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　マウスが移動した時に発生します。<r/>
	</desc>
</member>

<member>
	<name>onMouseWheel</name>
	<type>event</type>
	<shortdesc>マウスホイールが回転した</shortdesc>
	<arg>
		<argitem>
			<name>shift</name>
			<default></default>
			<desc>
				　マウスが移動していた時に同時に押されていたシフト系のキーやマウスのボタンの状態です。
				以下の値のビット OR による組み合わせになります。<r/>
				<tt><kw>ssAlt</kw>     : </tt>ALT キーが押されていた<r/>
				<tt><kw>ssShift</kw>   : </tt>SHIFT キーが押されていた<r/>
				<tt><kw>ssCtrl</kw>    : </tt>CTRL キーが押されていた<r/>
				<tt><kw>ssLeft</kw>    : </tt>マウスの左ボタンが押されていた<r/>
				<tt><kw>ssMiddle</kw>  : </tt>マウスの中ボタンが押されていた<r/>
				<tt><kw>ssRight</kw>   : </tt>マウスの右ボタンが押されていた<r/>
			</desc>
		</argitem>
		<argitem>
			<name>delta</name>
			<default></default>
			<desc>
				　ホイールの回転角です。上方向(ユーザの反対側の方向)に回された場合は正、
				下方向(ユーザ側の方向)に回された場合は負の値になります。通常、最小量は 120
				となります。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　ホイールが回転した位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　ホイールが回転した位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　マウスホイールが回転した時に発生します。<r/>
	</desc>
</member>

<member>
	<name>onTouchDown</name>
	<type>event</type>
	<shortdesc>画面がタッチされた</shortdesc>
	<arg>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　タッチされた位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　タッチされた位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>cx</name>
			<default></default>
			<desc>
				　指が接触している横方向ピクセル数です。<r/>
				　デバイスが対応していない場合は常に1です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>cy</name>
			<default></default>
			<desc>
				　指が接触している縦方向ピクセル数です。<r/>
				　デバイスが対応していない場合は常に1です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>id</name>
			<default></default>
			<desc>
				　タッチIDです。<r/>
				　マルチタッチ時、各位置ごとに固有の値が設定され、このIDによって位置を識別できます。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　タッチパネルにタッチされた時に発生します。<r/>
	</desc>
</member>

<member>
	<name>onTouchUp</name>
	<type>event</type>
	<shortdesc>画面から指が離された</shortdesc>
	<arg>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　離された位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　離された位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>cx</name>
			<default></default>
			<desc>
				　指が接触している横方向ピクセル数です。<r/>
				　デバイスが対応していない場合は常に1です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>cy</name>
			<default></default>
			<desc>
				　指が接触している縦方向ピクセル数です。<r/>
				　デバイスが対応していない場合は常に1です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>id</name>
			<default></default>
			<desc>
				　タッチIDです。<r/>
				　マルチタッチ時、各位置ごとに固有の値が設定され、このIDによって位置を識別できます。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　タッチパネルから指が離された時に発生します。<r/>
	</desc>
</member>

<member>
	<name>onTouchMove</name>
	<type>event</type>
	<shortdesc>指が移動した</shortdesc>
	<arg>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　タッチ位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　タッチ位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>cx</name>
			<default></default>
			<desc>
				　指が接触している横方向ピクセル数です。<r/>
				　デバイスが対応していない場合は常に1です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>cy</name>
			<default></default>
			<desc>
				　指が接触している縦方向ピクセル数です。<r/>
				　デバイスが対応していない場合は常に1です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>id</name>
			<default></default>
			<desc>
				　タッチIDです。<r/>
				　マルチタッチ時、各位置ごとに固有の値が設定され、このIDによって位置を識別できます。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　タッチパネル上で触れている指が移動した時に発生します。<r/>
	</desc>
</member>

<member>
	<name>onTouchScaling</name>
	<type>event</type>
	<shortdesc>拡大操作した</shortdesc>
	<arg>
		<argitem>
			<name>startdistance</name>
			<default></default>
			<desc>
				　マルチタッチが開始された時のピクセル距離です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>currentdistance</name>
			<default></default>
			<desc>
				　イベント発生時のタッチのピクセル距離です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>cx</name>
			<default></default>
			<desc>
				　中心位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>cy</name>
			<default></default>
			<desc>
				　中心位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>flag</name>
			<default></default>
			<desc>
				　マルチタッチ状態フラグです。<r/>
				<tt><kw>0x01</kw>     : </tt>マルチタッチが開始された最初のイベントに設定されています。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　タッチパネル上でマルチタッチによって拡大操作した時に発生します。<r/>
	</desc>
</member>

<member>
	<name>onTouchRotate</name>
	<type>event</type>
	<shortdesc>回転操作した</shortdesc>
	<arg>
		<argitem>
			<name>startangle</name>
			<default></default>
			<desc>
				　マルチタッチが開始された時のラジアン角度です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>currentangle</name>
			<default></default>
			<desc>
				　イベント発生時のタッチのラジアン角度です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>distance</name>
			<default></default>
			<desc>
				　イベント発生時のタッチのピクセル距離です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>cx</name>
			<default></default>
			<desc>
				　中心位置の x 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>cy</name>
			<default></default>
			<desc>
				　中心位置の y 座標 ( クライアント座標での ) の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>flag</name>
			<default></default>
			<desc>
				　マルチタッチ状態フラグです。<r/>
				<tt><kw>0x01</kw>     : </tt>マルチタッチが開始された最初のイベントに設定されています。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　タッチパネル上でマルチタッチによって回転操作した時に発生します。<r/>
	</desc>
</member>

<member>
	<name>onMultiTouch</name>
	<type>event</type>
	<shortdesc>マルチタッチ状態が変化した</shortdesc>
	<arg></arg>
	<result></result>
	<desc>
		　マルチタッチ状態が開始されたり、移動したり、離れた時に発生します。<r/>
		　座標情報は <ref>Window.touchPointCount</ref> プロパティと <ref>Window.getTouchPoint</ref> メソッドで取得できます。<r/>
	</desc>
	<ref>Window.getTouchPoint</ref>
	<ref>Window.touchPointCount</ref>
</member>

<member>
	<name>onKeyDown</name>
	<type>event</type>
	<shortdesc>キーが押された</shortdesc>
	<arg>
		<argitem>
			<name>key</name>
			<default></default>
			<desc>
				　押されたキーの<kw>仮想キーコード</kw>の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>shift</name>
			<default></default>
			<desc>
				　キーが押された時に同時に押されていたシフト系のキーやマウスのボタンの状態です。
				以下の値のビット OR による組み合わせになります。<r/>
				<tt><kw>ssAlt</kw>     : </tt>ALT キーが押されていた<r/>
				<tt><kw>ssShift</kw>   : </tt>SHIFT キーが押されていた<r/>
				<tt><kw>ssCtrl</kw>    : </tt>CTRL キーが押されていた<r/>
				<tt><kw>ssLeft</kw>    : </tt>マウスの左ボタンが押されていた<r/>
				<tt><kw>ssMiddle</kw>  : </tt>マウスの中ボタンが押されていた<r/>
				<tt><kw>ssRight</kw>   : </tt>マウスの右ボタンが押されていた<r/>
				　また、キーボードが長時間押され、キーリピートが発生している場合は
				以下の値も組み合わされます。<r/>
				<tt><kw>ssRepeat</kw>  : </tt>キーリピートが発生した<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　キーが押された時に発生します。<r/>
	</desc>
</member>

<member>
	<name>onKeyUp</name>
	<type>event</type>
	<shortdesc>キーが離された</shortdesc>
	<arg>
		<argitem>
			<name>key</name>
			<default></default>
			<desc>
				　離されたキーの<kw>仮想キーコード</kw>の値です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>shift</name>
			<default></default>
			<desc>
				　キーが離された時に同時に押されていたシフト系のキーやマウスのボタンの状態です。
				以下の値のビット OR による組み合わせになります。<r/>
				<tt><kw>ssAlt</kw>     : </tt>ALT キーが押されていた<r/>
				<tt><kw>ssShift</kw>   : </tt>SHIFT キーが押されていた<r/>
				<tt><kw>ssCtrl</kw>    : </tt>CTRL キーが押されていた<r/>
				<tt><kw>ssLeft</kw>    : </tt>マウスの左ボタンが押されていた<r/>
				<tt><kw>ssMiddle</kw>  : </tt>マウスの中ボタンが押されていた<r/>
				<tt><kw>ssRight</kw>   : </tt>マウスの右ボタンが押されていた<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　キーが離された時に発生します。<r/>
	</desc>
</member>

<member>
	<name>onKeyPress</name>
	<type>event</type>
	<shortdesc>文字が入力された</shortdesc>
	<arg>
		<argitem>
			<name>key</name>
			<default></default>
			<desc>
				　入力された文字です。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　文字が入力されたときに発生します。<ref>Window.onKeyDown</ref> と異なるのは、onKeyDown が
		仮想キーコードを扱うのに対し、このイベントは文字そのものを扱います。押されたキーが
		文字とは関係のないキー (ファンクションキーなど) の場合はこのイベントは発生しません。<r/>
		Ctrlキーと同時に押された場合は、以下に示すようなコントロールコードが送られてきます。<r/>
		<tt>0x00 : </tt>Ctrl+@<r/>
		<tt>0x01 : </tt>Ctrl+A<r/>
		<tt>0x02 : </tt>Ctrl+B<r/>
		<tt>0x03 : </tt>Ctrl+C<r/>
		<tt>0x04 : </tt>Ctrl+D<r/>
		<tt>0x05 : </tt>Ctrl+E<r/>
		<tt>0x06 : </tt>Ctrl+F<r/>
		<tt>0x07 : </tt>Ctrl+G<r/>
		<tt>0x08 : </tt>Ctrl+H<r/>
		<tt>0x09 : </tt>Ctrl+I<r/>
		<tt>0x0A : </tt>Ctrl+J<r/>
		<tt>0x0B : </tt>Ctrl+K<r/>
		<tt>0x0C : </tt>Ctrl+L<r/>
		<tt>0x0D : </tt>Ctrl+M<r/>
		<tt>0x0E : </tt>Ctrl+N<r/>
		<tt>0x0F : </tt>Ctrl+O<r/>
		<tt>0x10 : </tt>Ctrl+P<r/>
		<tt>0x11 : </tt>Ctrl+Q<r/>
		<tt>0x12 : </tt>Ctrl+R<r/>
		<tt>0x13 : </tt>Ctrl+S<r/>
		<tt>0x14 : </tt>Ctrl+T<r/>
		<tt>0x15 : </tt>Ctrl+U<r/>
		<tt>0x16 : </tt>Ctrl+V<r/>
		<tt>0x17 : </tt>Ctrl+W<r/>
		<tt>0x18 : </tt>Ctrl+X<r/>
		<tt>0x19 : </tt>Ctrl+Y<r/>
		<tt>0x1A : </tt>Ctrl+Z<r/>
		<tt>0x1B : </tt>Ctrl+[<r/>
		<tt>0x1C : </tt>Ctrl+\<r/>
		<tt>0x1D : </tt>Ctrl+]<r/>
		<tt>0x1E : </tt>Ctrl+^<r/>
		<tt>0x1F : </tt>Ctrl+_<r/>
	</desc>
</member>

<member>
	<name>onResize</name>
	<type>event</type>
	<shortdesc>ウィンドウのサイズが変化した</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　ウィンドウのサイズが変化した時に発生します。<r/>
		　実際のサイズは <ref>Window.width</ref> プロパティや <ref>Window.height</ref> プロパティなどで取得してください。<r/>
	</desc>
</member>

<member>
	<name>onFileDrop</name>
	<type>event</type>
	<shortdesc>ファイルがドロップされた</shortdesc>
	<arg>
		<argitem>
			<name>files</name>
			<default></default>
			<desc>
				　ドロップされたファイル名が格納された配列(Array)オブジェクトです。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ファイルがエクスプローラなどからウィンドウにドロップされたときに発生します。<r/>
		　単一のファイルがドロップされた場合でも引数には配列オブジェクトが渡されます (最初の要素が
		そのファイルになります )。<r/>
	</desc>
</member>

<member>
	<name>onCloseQuery</name>
	<type>event</type>
	<shortdesc>ウィンドウを閉じる確認</shortdesc>
	<arg>
		<argitem>
			<name>canclose</name>
			<default></default>
			<desc>
				　ウィンドウを閉じることができるかどうかが渡されます。下位クラスから上位クラスのイベントハンドラが
				呼ばれる課程で、下位クラスが決定した「ウィンドウを閉じることができるか」が渡されます。<r/>
				
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ウィンドウを閉じることができるかどうかを確認するためのイベントです。ウィンドウを閉じることが
		できない場合、上位クラスの同メソッドに引数として false を渡してください。<r/>
	</desc>
</member>

<member>
	<name>onPopupHide</name>
	<type>event</type>
	<shortdesc>ポップアップウィンドウを閉じる</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　ポップアップウィンドウが閉じるべき時に発生するイベントです。このイベントは、<ref>Window.stayOnTop</ref> プロパティが真で、かつ、<ref>Window.focusable</ref> プロパティが偽の場合、「他のウィンドウがクリックされた」あるいは「他のアプリケーションがアクティブになった」時に発生します。<r/>
		　通常は、ここでウィンドウを閉じたり、非表示にする処理を行ってください。<r/>
	</desc>
	<ref>Window.focusable</ref>
	<ref>Window.stayOnTop</ref>
</member>

<member>
	<name>onActivate</name>
	<type>event</type>
	<shortdesc>ウィンドウがアクティブになったとき</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　ウィンドウがアクティブになったときに呼び出されるイベント関数を表します。<r/>
		　このイベントは、ウィンドウが既にアクティブの場合にも発生する可能性があるので注意してください (完全に onActivate → onDeactivate → onActivate → …… の順に発生する保証がない )。<r/>
	</desc>
	<ref>Window.onDeactivate</ref>
	<ref>System.onActivate</ref>
	<ref>System.onDeactivate</ref>

</member>

<member>
	<name>onDeactivate</name>
	<type>event</type>
	<shortdesc>ウィンドウが非アクティブになったとき</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　ウィンドウが非アクティブになったときに呼び出されるイベント関数を表します。<r/>
		　このイベントは、ウィンドウが既に非アクティブの場合にも発生する可能性があるので注意してください (完全に onActivate → onDeactivate → onActivate → …… の順に発生する保証がない )。<r/>
	</desc>
	<ref>Window.onActivate</ref>
	<ref>System.onActivate</ref>
	<ref>System.onDeactivate</ref>

</member>

<member>
	<name>onHintChanged</name>
	<type>event</type>
	<shortdesc>ヒントの状態が変化したとき</shortdesc>
	<arg>
		<argitem>
			<name>text</name>
			<default></default>
			<desc>
				　ヒントに表示する文字列が渡されます。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　ヒント表示X軸座標値が渡されます。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　ヒント表示Y軸座標値が渡されます。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>isshow</name>
			<default></default>
			<desc>
				　ヒントを表示するか、非表示にするかが渡されます。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ヒントの状態が変化したときに呼び出されるイベント関数を表します。<r/>
		　表示/非表示に従いヒントの表示を行います。<r/>
		　ヒントをレイヤで表示する場合は、そのレイヤのマウスメッセージが無視されるように <ref>Layer.hitThreshold</ref> を256に設定します。<r/>
		　また、<ref>Layer.ignoreHintSensing</ref> もtrueを指定します。<r/>
	</desc>
	<ref>Window.hintDelay</ref>
	<ref>Layer.ignoreHintSensing</ref>
	<ref>Layer.hitThreshold</ref>
</member>

<member>
	<name>onDisplayRotate</name>
	<type>event</type>
	<shortdesc>画面が回転されたとき(1.1.0以降)</shortdesc>
	<arg>
		<argitem>
			<name>orientation</name>
			<default></default>
			<desc>
				　画面の向き( orientation ) です。<r/>
				　以下のいずれかの値になります。<r/>
				　oriUnknown (取得失敗/不明), oriPortrait(縦向き), oriLandscape(横向き)<r/>
			</desc>
		</argitem>
		<argitem>
			<name>angle</name>
			<default></default>
			<desc>
				　角度です。<r/>
				　角度 ( angle ) は、0、90、180、270、-1 のいずれかで、取得できなかった時は-1となります。<r/>
				　角度は、そのデバイスデフォルトからの回転角なので、縦向きのデバイスでは縦向きで0となります。<r/>
				　通常のデバイスだと、横向きで0が多ようです。<r/>
				　縦向きが0になるのは最近の8インチタブレットなどで、縦向きが標準の向きとなっているものです。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>bpp</name>
			<default></default>
			<desc>
				　 bits per pixel です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>width</name>
			<default></default>
			<desc>
				　画面の幅です。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>height</name>
			<default></default>
			<desc>
				　画面の高さです。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　画面が回転されたときに呼び出されるイベント関数を表します。<r/>
	</desc>
	<ref>Window.displayOrientation</ref>
	<ref>Window.displayRotate</ref>
</member>


<member>
	<name>close</name>
	<type>method</type>
	<shortdesc>ウィンドウを閉じる</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　<ref>Window.showModal</ref> メソッドで表示されたウィンドウを閉じます。ウィンドウを閉じる前に <ref>Window.onCloseQuery</ref> イベントが発生し、ウィンドウを閉じることができるかどうかを確認することができます。<r/>
	</desc>
	<ref>Window.showModal</ref>
	<ref>Window.onCloseQuery</ref>
</member>

<member>
	<name>bringToFront</name>
	<type>method</type>
	<shortdesc>ウィンドウを最前面に移動</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　ウィンドウを最前面に移動します。アプリケーションが非アクティブの場合はアプリケーション
		自体もアクティブにします。<r/>
	</desc>
</member>

<member>
	<name>update</name>
	<type>method</type>
	<shortdesc>ウィンドウ内容の強制的な描画</shortdesc>
	<arg>
		<argitem>
			<name>type</name>
			<default>tutNormal</default>
			<desc>
				　ウィンドウ描画のタイプを指定します。<r/>
				　<tt><kw>tutNormal</kw></tt> を指定すると通常の描画 ( 差分描画 )、
				<tt><kw>tutEntire</kw></tt> を指定するとウィンドウ内容全体を描画します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　引数は現バージョンでは無視されます。<r/>
		　tutNormal や tutEntire は実装されていません。<r/>
	</desc>
</member>

<member>
	<name>showModal</name>
	<type>method</type>
	<shortdesc>モーダルでウィンドウを表示</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　ウィンドウを<kw>モーダル</kw> ( <kw>モード付き</kw> ) で表示します。
		このメソッドはウィンドウを表示状態に
		し、かつ、他のウィンドウを一時的に無効にします。そのためユーザはこのウィンドウのみに
		アクセスできる状態になります ( これをモード付きの状態と呼びます )。ウィンドウが閉じられると
		モード付きの状態は解除されます。<r/>
		　このメソッドを呼び出す時点ではウィンドウは非表示でなくてはなりません。<r/>
	</desc>
</member>

<member>
	<name>setMaskRegion</name>
	<type>method</type>
	<shortdesc>ウィンドウリージョンをマスクに従って設定</shortdesc>
	<arg>
		<argitem>
			<name>threshold</name>
			<default>1</default>
			<desc>
				　マスクのスレッショルド ( 敷居値 ) を指定します。<r/>
				　プライマリレイヤのマスク ( レイヤの不透明度の情報 ) のうち、この値よりも大きい部分の形に
				ウィンドウが切り取られて表示されます。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ウィンドウリージョンをプライマリレイヤのマスク ( レイヤの不透明度の情報 ) に従って設定します。<r/>
		　ウィンドウを不定形にする事ができます。<r/>
		　表示されるプライマリレイヤと、ウィンドウの大きさ、位置がずれないようにするには
		以下のことを行う必要があります。<r/>
		<ul>
		<li><ref>Window.borderStyle</ref> は bsNone に設定します。</li>
		<li><ref>Layer.imageLeft</ref> および <ref>Layer.imageTop</ref> は 0 に設定します。</li>
		</ul>
	</desc>
	<ref>Window.removeMaskRegion</ref>
</member>

<member>
	<name>removeMaskRegion</name>
	<type>method</type>
	<shortdesc>ウィンドウリージョンの解除</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　<ref>Window.setMaskRegion</ref>で設定したウィンドウリージョンを解除し、ウィンドウを矩形に戻します。<r/>
	</desc>
	<ref>Window.setMaskRegion</ref>
</member>

<member>
	<name>add</name>
	<type>method</type>
	<shortdesc>管理オブジェクトの追加</shortdesc>
	<arg>
		<argitem>
			<name>object</name>
			<default></default>
			<desc>
				　管理されるオブジェクトを指定します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　管理オブジェクトを追加します。ここで指定されたオブジェクトは、ウィンドウが無効化
		されるときに自動的に無効化されるようになります。<r/>
	</desc>
	<ref>Window.remove</ref>
</member>

<member>
	<name>remove</name>
	<type>method</type>
	<shortdesc>管理オブジェクトの削除</shortdesc>
	<arg>
		<argitem>
			<name>object</name>
			<default></default>
			<desc>
				　管理オブジェクトのリストから削除するオブジェクトを指定します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　管理オブジェクトのリストから指定されたオブジェクトを削除します。<r/>
	</desc>
	<ref>Window.add</ref>
</member>

<member>
	<name>setSize</name>
	<type>method</type>
	<shortdesc>ウィンドウサイズの設定</shortdesc>
	<arg>
		<argitem>
			<name>width</name>
			<default></default>
			<desc>
				　ウィンドウの横幅を指定します。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>height</name>
			<default></default>
			<desc>
				　ウィンドウの縦幅を指定します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ウィンドウのサイズを指定します。<r/>
		　ウィンドウのサイズを指定するときには、<ref>Window.width</ref> や
		<ref>Window.height</ref> プロパティを個々に設定するよりも
		このメソッドで一気に指定した方が効率的です。<r/>
	</desc>
	<ref>Window.width</ref>
	<ref>Window.height</ref>
	<ref>Window.setPos</ref>
	<ref>Window.setInnerSize</ref>
	<ref>Window.setMinSize</ref>
	<ref>Window.setMaxSize</ref>
</member>

<member>
	<name>setMinSize</name>
	<type>method</type>
	<shortdesc>ウィンドウの最小サイズの設定</shortdesc>
	<arg>
		<argitem>
			<name>width</name>
			<default></default>
			<desc>
				　ウィンドウの最小の横幅を指定します。0を指定すると制限は無くなります。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>height</name>
			<default></default>
			<desc>
				　ウィンドウの最小の縦幅を指定します。0を指定すると制限は無くなります。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ウィンドウの最小サイズを指定します。ウィンドウはこのメソッドで指定したサイズより小さくなることはできません。
	</desc>
	<ref>Window.setMaxSize</ref>
	<ref>Window.setSize</ref>
	<ref>Window.minWidth</ref>
	<ref>Window.minHeight</ref>
</member>

<member>
	<name>setMaxSize</name>
	<type>method</type>
	<shortdesc>ウィンドウの最大サイズの設定</shortdesc>
	<arg>
		<argitem>
			<name>width</name>
			<default></default>
			<desc>
				　ウィンドウの最大の横幅を指定します。0を指定すると制限は無くなります。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>height</name>
			<default></default>
			<desc>
				　ウィンドウの最大の縦幅を指定します。0を指定すると制限は無くなります。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ウィンドウの最大サイズを指定します。ウィンドウはこのメソッドで指定したサイズより大きくなることはできません。
	</desc>
	<ref>Window.setMixSize</ref>
	<ref>Window.setSize</ref>
	<ref>Window.maxWidth</ref>
	<ref>Window.maxHeight</ref>
</member>

<member>
	<name>setPos</name>
	<type>method</type>
	<shortdesc>ウィンドウ位置の設定</shortdesc>
	<arg>
		<argitem>
			<name>left</name>
			<default></default>
			<desc>
				　ウィンドウの左端位置を指定します。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>top</name>
			<default></default>
			<desc>
				　ウィンドウの上端位置を指定します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ウィンドウの位置を指定します。<r/>
		　ウィンドウの位置を指定するときには、<ref>Window.left</ref> や
		<ref>Window.top</ref> プロパティを個々に設定するよりも
		このメソッドで一気に指定した方が効率的です。<r/>
	</desc>
	<ref>Window.left</ref>
	<ref>Window.top</ref>
	<ref>Window.setSize</ref>
</member>

<member>
	<name>setInnerSize</name>
	<type>method</type>
	<shortdesc>クライアントサイズの設定</shortdesc>
	<arg>
		<argitem>
			<name>width</name>
			<default></default>
			<desc>
				　クライアントの横幅を指定します。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>height</name>
			<default></default>
			<desc>
				　クライアントの縦幅を指定します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　ウィンドウのクライアントサイズを指定します。<r/>
		　クライアントは、レイヤを表示可能なウィンドウ内の領域です。<r/>
		　このサイズを設定するとウィンドウのサイズもそれに応じて変化します。<r/>
		　クライアントのサイズを指定するときには、<ref>Window.innerWidth</ref> や
		<ref>Window.innerHeight</ref> プロパティを個々に設定するよりも
		このメソッドで一気に指定した方が効率的です。<r/>
	</desc>
	<ref>Window.innerWidth</ref>
	<ref>Window.innerHeight</ref>
</member>

<member>
	<name>setZoom</name>
	<type>method</type>
	<shortdesc>レイヤ拡大倍率の設定</shortdesc>
	<arg>
		<argitem>
			<name>numer</name>
			<default></default>
			<desc>
				　倍率の分子を整数で指定します。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>denom</name>
			<default></default>
			<desc>
				　倍率の分母を整数で指定します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　レイヤの拡大倍率を指定します。分子/分母で指定したサイズで画像が拡大、あるいは縮小されて表示されます。<r/>
		　分子・分母が公約数を持つ場合は自動的に約分されるため、<ref>Window.zoomNumer</ref> プロパティや <ref>Window.zoomDenom</ref> プロパティで読み出される値は、このメソッドで指定した値とは異なる場合があります。<r/>
		　現バージョンの吉里吉里では、拡大・縮小時に補間がかかるかどうかはグラフィックカードのハードウェアやドライバに影響されます。補間がかからないハードウェアやドライバの場合は、画質が荒くなります。<r/>
		　オプションによっては、吉里吉里は拡大・縮小に使用可能なハードウェアを、倍率が変更されるたびに調査するため、このメソッドは拡大率を連続的に変化させて演出を行うような用途には適していません。<r/>
	</desc>
	<ref>Window.zoomNumer</ref>
	<ref>Window.zoomDenom</ref>
</member>

<member>
	<name>postInputEvent</name>
	<type>method</type>
	<shortdesc>入力イベントの生成</shortdesc>
	<arg>
		<argitem>
			<name>eventname</name>
			<default></default>
			<desc>
				　イベント名称を指定します。以下の文字列で指定します。<r/>
				<ul>
				<li>"<kw>onKeyDown</kw>" は <ref>Window.onKeyDown</ref> イベントを生成します。</li>
				<li>"<kw>onKeyPress</kw>" は <ref>Window.onKeyPress</ref> イベントを生成します。</li>
				<li>"<kw>onKeyUp</kw>" は <ref>Window.onKeyUp</ref> イベントを生成します。onKeyDownとonKeyUpは対になるので、onKeyDownを生成したら対応するonKeyUpも生成することを推奨します。</li>
				</ul>
			</desc>
		</argitem>
		<argitem>
			<name>params</name>
			<default>null</default>
			<desc>
				　イベントのパラメータが格納された辞書配列を指定します。<r/>
				<ul>
				<li>"onKeyDown" イベントや "onKeyUp" イベントでは、"key" に仮想キーコード、"shift" にシフト状態を格納します。"shift" を省略すると 0 であると見なされます。</li>
				<li>"onKeyPress" イベントでは "key" に文字を指定します。</li>
				</ul>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　入力イベントを生成します。現バージョンではキー入力に関する３つのイベントを生成できます。<r/>
		　このメソッドは、イベントを非同期イベントとして生成します。つまり、このメソッドは、対応するイベントハンドラの終了を待たずに帰ります。実際にイベントハンドラが呼ばれて処理が行われるのは、いったん吉里吉里に制御が戻った後となります。<r/>
		　入力イベントは、Windowクラスのほか、通常の入力イベントと同じく、Layerクラスの該当するイベントとしても発生します。<r/>
		<example>
postInputEvent('onKeyDown', %[key: VK_UP, shift: ssShift]);<r/>
postInputEvent('onKeyUp',   %[key: VK_UP, shift: ssShift]);<r/>
	// 左カーソルキーを押す<r/></example>
	</desc>

</member>


<member>
	<name>hideMouseCursor</name>
	<type>method</type>
	<shortdesc>マウスカーソルを一時的に隠す</shortdesc>
	<arg>
	</arg>
	<result></result>
	<desc>
		　マウスカーソルを一時的に隠します。マウスを少しでも動かすと
		マウスカーソルは再び表示されるようになります。<r/>
		　このメソッドは、<ref>Window.mouseCursorState</ref>を<tt><kw>mcsTempHidden</kw></tt>に設定するのと同じ効果を持ちます。<r/>
	</desc>
</member>


<member>
	<name>registerMessageReceiver</name>
	<type>method</type>
	<shortdesc>メッセージ受信関数の登録/登録削除</shortdesc>
	<arg>
		<argitem>
			<name>mode</name>
			<default></default>
			<desc>
				　登録するか、登録削除するかどうかを指定します。<r/>
				　<kw>wrmRegister</kw> を指定すると登録になります。<kw>wrmUnregister</kw> を
				指定すると登録削除になります。<r/>
				　wrm で始まる定数は tp_stub.h に定義されています。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>func</name>
			<default></default>
			<desc>
				　メッセージ受信関数を指定します。<r/>
				　メッセージ受信関数は bool __stdcall func(void *userdata, tTVPWindowMessage *Message)
				の形式である必要があり、このメソッドに渡す際にその関数ポインタを整数型にキャストして渡す
				必要があります。<r/>
				　構造体 tTVPWindowMessage は tp_stub.h に定義されています。<r/>
				　この関数が true を返すと吉里吉里本体側はそのウィンドウメッセージに関知しなくなります。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>userdata</name>
			<default></default>
			<desc>
				　func 引数で指定された受信関数の userdata 引数に渡すためのデータポインタを指定します。<r/>
				　このメソッドに渡す際にはそのポインタを整数型にキャストして渡す必要があります。<r/>
				　この引数は mode 引数が wrmRegister でないときは無視されます。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　このメソッドは C++ 等で記述されたプラグインから利用されることを想定しているメソッドです。TJS2
		からは正常に利用できません。<r/>
		　このメソッドでは、このウィンドウを通過するメッセージをトラップするためのメッセージ受信関数を
		登録することができます。メッセージ受信関数では通常のウィンドウメッセージの他、
		TVP_WM_DETACH と TVP_WM_ATTACH という２つの重要なメッセージもトラップすることができ、
		ウィンドウが再構築や破棄されるタイミングにおいて、子ウィンドウを取り外すというような
		用途に使用できます。<r/>
		　吉里吉里ソース配布パッケージ中の src/plugins/win32/wmrdump に簡単な使用法の説明があります。<r/>
	</desc>
	<ref>Window.HWND</ref>
</member>

<member>
	<name>getTouchPoint</name>
	<type>method</type>
	<shortdesc>タッチ座標の取得</shortdesc>
	<arg>
		<argitem>
			<name>index</name>
			<default></default>
			<desc>
				　タッチ座標配列のインデックスを指定します。<r/>
			</desc>
		</argitem>
	</arg>
	<result></result>
	<desc>
		　現在のタッチ座標配列から指定インデックスの座標情報を取得します。<r/>
		　座標数は <ref>Window.touchPointCount</ref> プロパティで取得できます。<r/>
		　座標情報は以下の要素を含む辞書で返されます。<r/>
		<tt><kw>startX</kw>     : </tt>このタッチの開始座標の x 座標値 ( クライアント座標系 ) です<r/>
		<tt><kw>startY</kw>   : </tt>このタッチの開始座標の y 座標値 ( クライアント座標系 ) です<r/>
		<tt><kw>x</kw>    : </tt>このタッチの現在座標の x 座標値 ( クライアント座標系 ) です<r/>
		<tt><kw>y</kw>    : </tt>このタッチの現在座標の y 座標値 ( クライアント座標系 ) です<r/>
		<tt><kw>ID</kw>    : </tt>このタッチの識別用 IDです<r/>
	</desc>
	<ref>Window.touchPointCount</ref>
</member>

<member>
	<name>getMouseVelocity</name>
	<type>method</type>
	<shortdesc>マウス座標移動速度の取得(1.1.0以降)</shortdesc>
	<arg>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　X軸方向のマウス座標移動速度が返ります。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　Y軸方向のマウス座標移動速度が返ります。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>speed</name>
			<default></default>
			<desc>
				　マウス座標移動速度が返ります。<r/>
			</desc>
		</argitem>
	</arg>
	<result>取得が成功したか失敗したかが返ります</result>
	<desc>
		　現在のマウス移動速度を pixel / sec で取得します。<r/>
		　ウィンドウ内に入った瞬間から計測開始されています。<r/>
		　<ref>Window.resetMouseVelocity</ref> を使用して計測をリセットし、任意のタイミングか計測得できるように出来ます。<r/>
	</desc>
	<ref>Window.getTouchVelocity</ref>
	<ref>Window.resetMouseVelocity</ref>
</member>

<member>
	<name>getTouchVelocity</name>
	<type>method</type>
	<shortdesc>タッチ座標移動速度の取得(1.1.0以降)</shortdesc>
	<arg>
		<argitem>
			<name>id</name>
			<default></default>
			<desc>
				　タッチIDを指定します。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>x</name>
			<default></default>
			<desc>
				　X軸方向のマウス座標移動速度が返ります。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>y</name>
			<default></default>
			<desc>
				　Y軸方向のマウス座標移動速度が返ります。<r/>
			</desc>
		</argitem>
		<argitem>
			<name>speed</name>
			<default></default>
			<desc>
				　マウス座標移動速度が返ります。<r/>
			</desc>
		</argitem>
	</arg>
	<result>取得が成功したか失敗したかが返ります</result>
	<desc>
		　現在のタッチ移動速度を pixel / sec で取得します。<r/>
		　押下されてから離されるまでの間計測されています。<r/>
		　マルチタッチ対応のため ID ごとに速度計測されています。<r/>
		　<ref>Window.onTouchUp</ref> イベントのメソッド呼び出しが終了すると計測している速度情報は消えてしまうので注意が必要です。<r/>
	</desc>
	<ref>Window.getMouseVelocity</ref>
</member>

<member>
	<name>resetMouseVelocity</name>
	<type>method</type>
	<shortdesc>マウス座標移動速度計測のリセット(1.1.0以降)</shortdesc>
	<arg></arg>
	<result></result>
	<desc>
		　マウスの座標移動速度計測をリセットします。<r/>
		　リセットすることで任意のタイミングから速度計測を開始することが出来ます。<r/>
	</desc>
	<ref>Window.getMouseVelocity</ref>
</member>



<member>
	<name>visible</name>
	<type>property</type>
	<shortdesc>ウィンドウが表示されているかどうか</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウが表示されているかどうかを表します。値を設定することもできます。<r/>
		　真ならばウィンドウが表示されていて、偽ならばウィンドウは非表示の状態です。<r/>
	</desc>
</member>

<member>
	<name>caption</name>
	<type>property</type>
	<shortdesc>ウィンドウのキャプション</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウの<kw>キャプション</kw> ( タイトルバーのタイトル ) を表します。
		値を設定することもできます。<r/>
	</desc>
</member>

<member>
	<name>width</name>
	<type>property</type>
	<shortdesc>ウィンドウの横幅</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウの横幅を表します。値を設定することもできます。<r/>
	</desc>
	<ref>Window.height</ref>
	<ref>Window.setSize</ref>
</member>

<member>
	<name>height</name>
	<type>property</type>
	<shortdesc>ウィンドウの縦幅</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウの縦幅を表します。値を設定することもできます。<r/>
	</desc>
	<ref>Window.width</ref>
	<ref>Window.setSize</ref>
</member>

<member>
	<name>minWidth</name>
	<type>property</type>
	<shortdesc>ウィンドウの最小の横幅</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウの最小の横幅を表します。値を設定することもできます。0を指定すると制限は無くなります。<r/>
	</desc>
	<ref>Window.width</ref>
	<ref>Window.minHeight</ref>
	<ref>Window.maxWidth</ref>
	<ref>Window.maxHeight</ref>
	<ref>Window.setMinSize</ref>
	<ref>Window.setMaxSize</ref>
	<ref>Window.setSize</ref>
</member>

<member>
	<name>minHeight</name>
	<type>property</type>
	<shortdesc>ウィンドウの最小の縦幅</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウの最小の縦幅を表します。値を設定することもできます。0を指定すると制限は無くなります。<r/>
	</desc>
	<ref>Window.height</ref>
	<ref>Window.minWidth</ref>
	<ref>Window.maxWidth</ref>
	<ref>Window.maxHeight</ref>
	<ref>Window.setMinSize</ref>
	<ref>Window.setMaxSize</ref>
	<ref>Window.setSize</ref>
</member>

<member>
	<name>maxWidth</name>
	<type>property</type>
	<shortdesc>ウィンドウの最大の横幅</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウの最大の横幅を表します。値を設定することもできます。0を指定すると制限は無くなります。<r/>
	</desc>
	<ref>Window.width</ref>
	<ref>Window.maxHeight</ref>
	<ref>Window.minWidth</ref>
	<ref>Window.minHeight</ref>
	<ref>Window.setMinSize</ref>
	<ref>Window.setMaxSize</ref>
	<ref>Window.setSize</ref>
</member>

<member>
	<name>maxHeight</name>
	<type>property</type>
	<shortdesc>ウィンドウの最大の縦幅</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウの最大の縦幅を表します。値を設定することもできます。0を指定すると制限は無くなります。<r/>
	</desc>
	<ref>Window.height</ref>
	<ref>Window.maxWidth</ref>
	<ref>Window.minWidth</ref>
	<ref>Window.minHeight</ref>
	<ref>Window.setMinSize</ref>
	<ref>Window.setMaxSize</ref>
	<ref>Window.setSize</ref>
</member>

<member>
	<name>left</name>
	<type>property</type>
	<shortdesc>ウィンドウの左端位置</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウの左端位置を表します。値を設定することもできます。<r/>
		　左端位置はスクリーンの原点 ( 左上隅 ) からの x 座標です。<r/>
	</desc>
	<ref>Window.top</ref>
	<ref>Window.setPos</ref>
</member>

<member>
	<name>top</name>
	<type>property</type>
	<shortdesc>ウィンドウの上端位置</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウの上端位置を表します。値を設定することもできます。<r/>
		　上端位置はスクリーンの原点 ( 左上隅 ) からの y 座標です。<r/>
	</desc>
	<ref>Window.left</ref>
	<ref>Window.setPos</ref>
</member>

<member>
	<name>focusable</name>
	<type>property</type>
	<shortdesc>フォーカスを取得可能か</shortdesc>
	<access>r/w</access>
	<desc>
		　フォーカスを取得可能かどうかを表します。値を設定することもできます。<r/>
		　偽に設定すると、フォーカスを取得できなくなる、つまり、ウィンドウがアクティブにならなくなります。副作用として、タイトルバーをつかんでのウィンドウの移動やウィンドウのリサイズ、「×」ボタンを押してウィンドウを閉じる操作もできなくなります。<r/>
		　キーボード入力を得たいときは <ref>Window.trapKey</ref> プロパティを使用することができます。<r/>
		　通常、これは、ポップアップメニューのように、もっとも手前に表示されるが、それ自身はフォーカスを得ないウィンドウの実装に用います。<r/>
		　現バージョンでは、ウィンドウがフルスクリーン化するとき、あるいはフルスクリーンから復帰するときに、このプロパティの設定内容が失われる可能性があります。<r/>
	</desc>
	<ref>Window.trapKey</ref>
	<ref>Window.onPopupHide</ref>
</member>

<member>
	<name>trapKey</name>
	<type>property</type>
	<shortdesc>キー入力をトラップするか</shortdesc>
	<access>r/w</access>
	<desc>
		　キー入力をトラップするかどうかを表します。値を設定することもできます。<r/>
		　真に設定すると、他のウィンドウで発生したキー入力イベントを横取りし、このウィンドウ上で発生させることができます。<r/>
		　複数のウィンドウのこのプロパティが真に設定されている場合は、もっとも最後に作成したウィンドウに対してキー入力イベントが発生します。<r/>
	</desc>
	<ref>Window.focusable</ref>
</member>

<member>
	<name>innerWidth</name>
	<type>property</type>
	<shortdesc>クライアント領域の横幅</shortdesc>
	<access>r/w</access>
	<desc>
		　クライアント領域の横幅を表します。
		値を設定することもできます。<r/>
	</desc>
	<ref>Window.innerHeight</ref>
	<ref>Window.setInnerSize</ref>
</member>

<member>
	<name>innerHeight</name>
	<type>property</type>
	<shortdesc>クライアント領域の縦幅</shortdesc>
	<access>r/w</access>
	<desc>
		　クライアント領域の縦幅を表します。
		値を設定することもできます。<r/>
	</desc>
	<ref>Window.innerWidth</ref>
	<ref>Window.setInnerSize</ref>
</member>

<member>
	<name>zoomNumer</name>
	<type>property</type>
	<shortdesc>レイヤ拡大倍率(分子)</shortdesc>
	<access>r/w</access>
	<desc>
		　レイヤの拡大倍率の分子を表します。
		一応、値を設定することもできますが、値を設定する場合は <ref>Window.setZoom</ref> メソッドを使用してください。<r/>
		　分母は <ref>Window.zoomDenom</ref> プロパティが表します。<r/>
		　詳しくは <ref>Window.setZoom</ref> メソッドを参照してください。<r/>
	</desc>
	<ref>Window.setZoom</ref>
	<ref>Window.zoomDenom</ref>
</member>

<member>
	<name>zoomDenom</name>
	<type>property</type>
	<shortdesc>レイヤ拡大倍率(分母)</shortdesc>
	<access>r/w</access>
	<desc>
		　レイヤの拡大倍率の分母を表します。
		一応、値を設定することもできますが、値を設定する場合は <ref>Window.setZoom</ref> メソッドを使用してください。<r/>
		　分子は <ref>Window.zoomNumer</ref> プロパティが表します。<r/>
		　詳しくは <ref>Window.setZoom</ref> メソッドを参照してください。<r/>
	</desc>
	<ref>Window.setZoom</ref>
	<ref>Window.zoomNumer</ref>
</member>

<member>
	<name>drawDevice</name>
	<type>property</type>
	<shortdesc>描画デバイス</shortdesc>
	<access>r/w</access>
	<desc>
		　描画デバイスオブジェクトを表します。<r/>
		　値を設定することもできます。値を設定すると、以前このウィンドウに指定されていた描画デバイスは自動的に
		無効になります (invalidateされます)。<r/>
		　デフォルトでは、Window.BasicDrawDevice というクラスのインスタンスが指定されています。<r/>
		　Window.BasicDrawDevice の詳細については、吉里吉里ソースの core/visual/win32/BasicDrawDevice.cpp 内の説明も参照してください。<r/>
		　独自の描画デバイス (プラグインで提供される物) を指定する場合は、そのプラグインのドキュメントに
		従ってください。<r/>
	</desc>
</member>

<member>
	<name>borderStyle</name>
	<type>property</type>
	<shortdesc>ウィンドウ外見</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウの外見を表します。値を設定することもできます。<r/>
		　以下の値を設定することができます。<r/>
<tt><kw>bsDialog</kw>      :</tt> サイズ変更不可の、ダイアログボックスと同様の外見を持ちます。<r/>
<tt><kw>bsSingle</kw>      :</tt> サイズ変更不可のウィンドウです。<r/>
<tt><kw>bsNone</kw>        :</tt> ボーダーのないウィンドウです。<r/>
<tt><kw>bsSizeable</kw>    :</tt> サイズ変更可の一般的なウィンドウです。デフォルトです。<r/>
<tt><kw>bsToolWindow</kw>  :</tt> サイズ変更不可のツールウィンドウ(キャプションの小さいウィンドウ) です。<r/>
<tt><kw>bsSizeToolWin</kw> :</tt> bsToolWindow と似ていますが、サイズ変更が可能です。<r/>
	</desc>
</member>

<member>
	<name>stayOnTop</name>
	<type>property</type>
	<shortdesc>常に最上位に表示するかどうか</shortdesc>
	<access>r/w</access>
	<desc>
		　ウィンドウを常に最上位 ( 一番手前 ) に表示するかどうかを表します。値を設定することもできます。<r/>
		　真ならばウィンドウは常に最上位に表示されます。<r/>
		　現バージョンでは、ウィンドウがフルスクリーン化するとき、あるいはフルスクリーンから復帰するときに、このプロパティの設定内容が失われる可能性があります。<r/>
	</desc>
</member>

<member>
	<name>imeMode</name>
	<type>property</type>
	<shortdesc>デフォルトのIMEモード</shortdesc>
	<access>r</access>
	<desc>
		　デフォルトのIMEモードを表します。<r/>
		　ここで指定したモードは、どのレイヤにもフォーカスが無い状態に設定されるモードです。<r/>
		　未指定の場合は <kw>imDisable</kw>で、これはどのレイヤにもフォーカスが無い状態では IME は無効状態であるということになります。<r/>
		　指定可能な値については <ref>Layer.imeMode</ref> を参照してください。<r/>
	</desc>
</member>

<member>
	<name>mouseCursorState</name>
	<type>property</type>
	<shortdesc>マウスカーソル表示状態</shortdesc>
	<access>r/w</access>
	<desc>
		　マウスカーソルの表示状態を表します。値を設定することもできます。<r/>
		　<tt><kw>mcsVisible</kw></tt>を指定すると、マウスカーソルは表示状態になります。これはデフォルトの状態です。<r/>
		　<tt><kw>mcsTempHidden</kw></tt>を指定すると、マウスカーソルは非表示状態になりますが、少しでもマウスを動かすと<tt>mcsVisible</tt>に変わり、表示状態になります。<ref>Window.hideMouseCursor</ref>メソッドを呼び出すとこの状態になります。<r/>
		　<tt><kw>mcsHidden</kw></tt>を指定すると、マウスカーソルは非表示状態になります。マウスを動かしても表示状態にはなりません。<r/>
	</desc>
</member>


<member>
	<name>useMouseKey</name>
	<type>property</type>
	<shortdesc>マウスキーを使用するかどうか</shortdesc>
	<access>r/w</access>
	<desc>
		　マウスキーを使用するかどうかを表します。値を設定することもできます。<r/>
		　真ならばマウスキーを使用することができます。<r/>
		　マウスキーが有効になると、カーソルキーを使ってマウスカーソルを移動させることが
		できますが、キー入力系のイベントはいっさい発生しなくなります。<r/>
	</desc>
</member>

<member>
	<name>fullScreen</name>
	<type>property</type>
	<shortdesc>フルスクリーンかどうか</shortdesc>
	<access>r/w</access>
	<desc>
		　<kw>フルスクリーン</kw>かどうかを表します。値を設定することもできます。<r/>
		　真を指定すると現在のウィンドウのクライアント領域がフルスクリーンになります。フルスクリーン
		時の画面解像度はクライアント領域のサイズになります。<r/>
		　偽を指定するとウィンドウ表示になります。<r/>
	</desc>
</member>

<member>
	<name>mainWindow</name>
	<type>property</type>
	<shortdesc>メインウィンドウ</shortdesc>
	<access>r</access>
	<desc>
		　メインウィンドウ ( 最初に作成されたウィンドウ ) を表します。<r/>
	</desc>
</member>

<member>
	<name>focusedLayer</name>
	<type>property</type>
	<shortdesc>フォーカスを持っているレイヤオブジェクト</shortdesc>
	<access>r/w</access>
	<desc>
		　現在 <kw>フォーカス</kw> を持っているレイヤオブジェクトを表します。
		値を設定することもできます。<r/>
		　null の場合はどのレイヤもフォーカスを持っていません。レイヤオブジェクトを
		設定するとそのレイヤにフォーカスが移ります。<r/>
	</desc>
</member>

<member>
	<name>primaryLayer</name>
	<type>property</type>
	<shortdesc>プライマリレイヤオブジェクト</shortdesc>
	<access>r</access>
	<desc>
		　<kw>プライマリレイヤ</kw>オブジェクトを表します。<r/>
	</desc>
</member>

<member>
	<name>HWND</name>
	<type>property</type>
	<shortdesc>ウィンドウハンドル</shortdesc>
	<access>r</access>
	<desc>
		　ウィンドウハンドルを表します。<r/>
		　ここで得られるのは整数ですが、プラグインなどでこの数値を使う場合は HWND 型に
		キャストして使ってください。<r/>
	</desc>
	<ref>Window.registerMessageReceiver</ref>
</member>

<member>
	<name>touchScaleThreshold</name>
	<type>property</type>
	<shortdesc>マルチタッチ拡大閾値</shortdesc>
	<access>r/w</access>
	<desc>
		　マルチタッチで拡大を開始する閾値です。<r/>
		　2つのタッチ位置の距離がこの値以上変化した時に拡大イベントが発生します。<r/>
		　一度閾値を超えるといったん指が離されるまで拡大イベントは有効になります。<r/>
	</desc>
	<ref>Window.onTouchScaling</ref>
</member>

<member>
	<name>touchRotateThreshold</name>
	<type>property</type>
	<shortdesc>マルチタッチ回転閾値</shortdesc>
	<access>r/w</access>
	<desc>
		　マルチタッチで回転を開始する閾値です。<r/>
		　各タッチ位置の移動距離がこの値以上変化した時に回転イベントが発生します。<r/>
		　一度閾値を超えるといったん指が離されるまで回転イベントは有効になります。<r/>
	</desc>
	<ref>Window.onTouchRotate</ref>
</member>

<member>
	<name>touchPointCount</name>
	<type>property</type>
	<shortdesc>タッチ数</shortdesc>
	<access>r</access>
	<desc>
		　タッチパネルにタッチされている数です。<r/>
	</desc>
	<ref>Window.getTouchPoint</ref>
</member>

<member>
	<name>enableTouch</name>
	<type>property</type>
	<shortdesc>タッチイベント有効/無効</shortdesc>
	<access>r/w</access>
	<desc>
		　<kw>タッチイベント</kw>が有効かどうかを表します。値を設定することもできます。<r/>
		　真を指定すると<ref>Window.onTouchDown</ref>等のイベントが有効になり、タッチ操作では<ref>Window.onMouseDown</ref>などが発生しなくなります。<r/>
		　タッチデバイスがありマルチタッチが有効な環境では、デフォルトが true になります。<r/>
	</desc>
</member>

<member>
	<name>waitVSync</name>
	<type>property</type>
	<shortdesc>垂直同期待ち</shortdesc>
	<access>r/w</access>
	<desc>
		　トランジション(画面切り替え)などでディスプレイの垂直同期を待ってから描画するかどうかの設定です。<r/>
		　設定を変えると、画面のちらつきを抑えられる場合がありますが、描画のパフォーマンスが低下する場合もあります。<r/>
	</desc>
</member>


<member>
	<name>hintDelay</name>
	<type>property</type>
	<shortdesc>ヒント表示待ち時間</shortdesc>
	<access>r/w</access>
	<desc>
		　ヒントの表示待ち時間をミリ秒単位で表します。値を設定することもできます。<r/>
		　デフォルトは500ミリ秒です。<r/>
		　0を設定すると即座に <ref>Window.onHintChanged</ref> が呼び出されます(常時表示状態)。<r/>
		　-1を設定するとヒントが表示されることはありません。<r/>
	</desc>
	<ref>Window.onHintChanged</ref>
</member>


<member>
	<name>displayOrientation</name>
	<type>property</type>
	<shortdesc>ディスプレイの向き(1.1.0以降)</shortdesc>
	<access>r</access>
	<desc>
		　ディスプレイの向きを表します。<r/>
		　oriUnknown (取得失敗/不明), oriPortrait(縦向き), oriLandscape(横向き)のいずれかの値です。<r/>
	</desc>
	<ref>Window.onDisplayRotate</ref>
	<ref>Window.displayRotate</ref>
</member>


<member>
	<name>displayRotate</name>
	<type>property</type>
	<shortdesc>ディスプレイの回転角度(1.1.0以降)</shortdesc>
	<access>r</access>
	<desc>
		　ディスプレイの回転角度を表します。<r/>
		　0、90、180、270、-1 のいずれかで、取得できなかった時は-1です。<r/>
	</desc>
	<ref>Window.onDisplayRotate</ref>
	<ref>Window.displayOrientation</ref>
</member>

</doc>
